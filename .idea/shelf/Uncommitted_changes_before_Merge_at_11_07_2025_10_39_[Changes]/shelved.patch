Index: frontend/ProductPage/Product.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const productDetailModal = document.getElementById('product-detail-modal');\r\nconst modalImage = document.getElementById('modal-product-image');\r\nconst modalName = document.getElementById('modal-product-name');\r\nconst modalDescription = document.getElementById('modal-product-description');\r\nconst modalPrice = document.getElementById('modal-product-price');\r\nconst modalCategory = document.getElementById('modal-product-category');\r\nconst modalQuantity = document.getElementById('modal-product-quantity');\r\nconst closeButton = productDetailModal.querySelector('.close-button');\r\nconst addToCartModalButton = productDetailModal ? productDetailModal.querySelector('.add-to-cart-modal') : null;\r\nlet currentProductInModal = null;\r\nconst filterForm = document.querySelector(\".filter form\");\r\nlet allProductsCache = [];\r\nlet currentCart = [];\r\n\r\nfunction updateCartCount() {\r\n    const cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n    const count = cart.reduce((sum, item) => sum + item.quantity, 0);\r\n    const cartCountElement = document.getElementById(\"cart-count\");\r\n    if(cartCountElement) {\r\n        cartCountElement.textContent = count;\r\n    }\r\n}\r\n\r\nasync function loadAndSyncCart() {\r\n    const userToken = localStorage.getItem('adminToken');\r\n    let tempProducts = [...allProductsCache];\r\n\r\n    if (userToken) {\r\n        try {\r\n            const response = await fetch('http://localhost:3000/api/inv/warenkorb/myproducts', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${userToken}`\r\n                }\r\n            });\r\n            if (response.ok) {\r\n                currentCart = await response.json();\r\n                tempProducts = tempProducts.map(product => {\r\n                    const cartItem = currentCart.find(item => item.produktid === product.produktid);\r\n                    if (cartItem) {\r\n                        return { ...product,\r\n                            menge: product.menge - cartItem.anzahl\r\n                        };\r\n                    }\r\n                    return product;\r\n                });\r\n            } else {\r\n                currentCart = [];\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Fehler beim Abrufen des Warenkorbs für Synchronisation:\", error);\r\n            currentCart = [];\r\n        }\r\n    } else {\r\n        currentCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n        tempProducts = tempProducts.map(product => {\r\n            const cartItem = currentCart.find(item => item.produktid === product.produktid);\r\n            if (cartItem) {\r\n                return { ...product,\r\n                    menge: product.menge - cartItem.quantity\r\n                };\r\n            }\r\n            return product;\r\n        });\r\n    }\r\n    allProductsCache = tempProducts;\r\n    updateCartCount();\r\n}\r\n\r\nfunction renderProducts(productList) {\r\n    const container = document.querySelector('.product-card');\r\n    container.innerHTML = '';\r\n\r\n    if (!productList || productList.length === 0) {\r\n        container.innerHTML = '<p>Keine Produkte gefunden.</p>';\r\n        return;\r\n    }\r\n\r\n    productList.forEach(product => {\r\n        const isOutOfStock = product.menge <= 0;\r\n        let stockMessage ='';\r\n\r\n        if (product.menge <= 0) {\r\n            stockMessage = 'Nicht mehr im Vorrat';\r\n        } else if (product.menge < 5) {\r\n            stockMessage = 'Nur noch wenige auf Lager';\r\n        } else { //\r\n            stockMessage = 'Im Vorrat';\r\n        }\r\n\r\n        const card = document.createElement('div');\r\n        card.classList.add('product');\r\n        if (isOutOfStock) {\r\n            card.classList.add('out-of-stock');\r\n        }\r\n        card.innerHTML = `\r\n            ${product.bild ? `<img src=\"${product.bild}\" alt=\"${product.produktname}\">` : ''}\r\n            <h3>${product.produktname}</h3>\r\n            <p>${product.kategorie}</p>\r\n            <p><strong>€${parseFloat(product.preis).toFixed(2)}</strong></p>\r\n            <p class=\"product-stock-info\">${stockMessage}</p> \r\n            <button class=\"add-to-cart-initial\" ${isOutOfStock ? 'disabled' : ''}>\r\n                ${isOutOfStock ? 'Nicht vorrätig' : 'In den Warenkorb'}\r\n            </button>\r\n            `;\r\n        container.appendChild(card);\r\n\r\n        card.addEventListener('click', (event) => {\r\n            if (!event.target.classList.contains('add-to-cart-initial')) {\r\n                openProductModal(product);\r\n            }\r\n        });\r\n\r\n        const AddToCartButton = card.querySelector('.add-to-cart-initial');\r\n        AddToCartButton.addEventListener('click', async (event) => {\r\n            event.stopPropagation();\r\n            if (product.menge > 0) {\r\n                await addToCartAPI(product);\r\n            } else {\r\n                alert(\"Dieses Produkt ist leider nicht mehr vorrätig.\");\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfilterForm.addEventListener(\"submit\", function (event) {\r\n    event.preventDefault();\r\n\r\n    const filters = {};\r\n\r\n    const nameFilter = filterForm.elements[\"name\"].value.trim();\r\n    filters.name = nameFilter;\r\n\r\n    const maxPriceValue = filterForm.elements[\"maxPreis\"].value.trim();\r\n    const maxPriceFilter = parseFloat(maxPriceValue);\r\n    filters.maxPreis = !isNaN(maxPriceFilter) && maxPriceValue !== '' ? maxPriceFilter : 0;\r\n\r\n    const minMengeValue = filterForm.elements[\"minMenge\"].value.trim();\r\n    const minMengeFilter = parseInt(minMengeValue);\r\n    filters.minMenge = !isNaN(minMengeFilter) && minMengeValue !== '' ? minMengeFilter : 0;\r\n\r\n    const selectedCategory = filterForm.elements[\"kategorie\"].value;\r\n    if (selectedCategory && selectedCategory !== \"Kategorie\" && selectedCategory !== \"All\") {\r\n        filters.kategorie = selectedCategory;\r\n    } else {\r\n        filters.kategorie = \"\";\r\n    }\r\n\r\n    const selectedSort = filterForm.elements[\"sortierung\"].value;\r\n    if (selectedSort && selectedSort !== \"\") {\r\n        filters.sortierung = selectedSort;\r\n    } else {\r\n        filters.sortierung = \"\";\r\n    }\r\n\r\n    fetchProducts(filters, 'http://localhost:3000/api/inv/product/search/');\r\n});\r\n\r\nasync function fetchProducts(filters = {}, baseUrl = 'http://localhost:3000/api/inv/product/all') {\r\n    const query = new URLSearchParams(filters).toString();\r\n    const url = query ? `${baseUrl}?${query}` : baseUrl;\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const productsFromApi = await response.json();\r\n\r\n        allProductsCache = productsFromApi.map(p => ({ ...p,\r\n            originalMenge: p.menge\r\n        }));\r\n\r\n        await loadAndSyncCart();\r\n        renderProducts(allProductsCache);\r\n\r\n    } catch (error) {\r\n        console.error(\"Fehler beim Laden der Produkte:\", error);\r\n        const container = document.querySelector('.product-card');\r\n        container.innerHTML = '<p>Produkte konnten nicht geladen werden. Bitte versuchen Sie es später erneut.</p>';\r\n    }\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", () => {\r\n    fetchProducts({}, 'http://localhost:3000/api/inv/product/search/');\r\n});\r\n\r\nasync function addToCartAPI(productToAdd, anzahl = 1) {\r\n    const userToken = localStorage.getItem('adminToken');\r\n\r\n    if (productToAdd.menge < anzahl) {\r\n        alert(\"Nicht genügend Produkte auf Lager!\");\r\n        return;\r\n    }\r\n\r\n    if (userToken) {\r\n        try {\r\n            const response = await fetch('http://localhost:3000/api/inv/warenkorb/add', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${userToken}`\r\n                },\r\n                body: JSON.stringify({ produktid: productToAdd.produktid, anzahl })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                if (response.status === 401 || response.status === 403) {\r\n                    alert(\"Sitzung abgelaufen oder nicht autorisiert. Bitte neu anmelden.\");\r\n                    window.location.href = \"../LoginPage/loginpage.html\";\r\n                    return;\r\n                }\r\n                const errorData = await response.json();\r\n                throw new Error(`Fehler beim Hinzufügen zum Warenkorb: ${errorData.message || response.statusText}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n            alert(\"Produkt zum Warenkorb hinzugefügt!\");\r\n            const updatedProductIndex = allProductsCache.findIndex(p => p.produktid === productToAdd.produktid);\r\n            if (updatedProductIndex !== -1) {\r\n                allProductsCache[updatedProductIndex].menge -= anzahl;\r\n                renderProducts(allProductsCache);\r\n            }\r\n            updateCartCount();\r\n            return result;\r\n        } catch (error) {\r\n            console.error(\"Fehler beim Hinzufügen zum Warenkorb:\", error);\r\n            alert(\"Fehler beim Hinzufügen zum Warenkorb: \" + error.message);\r\n        }\r\n    } else {\r\n        let cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n        const existingItemIndex = cart.findIndex(item => item.produktid === productToAdd.produktid);\r\n\r\n        if (existingItemIndex !== -1) {\r\n            cart[existingItemIndex].quantity += anzahl;\r\n        } else {\r\n            cart.push({ ...productToAdd, quantity: anzahl });\r\n        }\r\n        localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n        alert(\"Produkt zum Warenkorb hinzugefügt!\");\r\n\r\n        const updatedProductIndex = allProductsCache.findIndex(p => p.produktid === productToAdd.produktid);\r\n        if (updatedProductIndex !== -1) {\r\n            allProductsCache[updatedProductIndex].menge -= anzahl;\r\n            renderProducts(allProductsCache);\r\n        }\r\n        updateCartCount();\r\n        return { message: \"Produkt lokal zum Warenkorb hinzugefügt.\" };\r\n    }\r\n}\r\n\r\nfunction openProductModal(product){\r\n    currentProductInModal = product;\r\n    modalImage.src = product.bild || '';\r\n    modalImage.alt = product.produktname;\r\n    modalName.textContent = product.produktname;\r\n    modalDescription.textContent = product.beschreibung || 'Keine detaillierte Beschreibung verfügbar.';\r\n    modalCategory.textContent = `Kategorie: ${product.kategorie}`;\r\n    modalPrice.textContent = `Preis: €${parseFloat(product.preis).toFixed(2)}`;\r\n    if (modalQuantity) {\r\n        modalQuantity.textContent = `Verfügbare Menge: ${product.menge}`;\r\n        if (addToCartModalButton) {\r\n            if (product.menge <= 0) {\r\n                addToCartModalButton.disabled = true;\r\n                addToCartModalButton.textContent = 'Nicht vorrätig';\r\n                addToCartModalButton.style.backgroundColor = '#ccc';\r\n            } else {\r\n                addToCartModalButton.disabled = false;\r\n                addToCartModalButton.textContent = 'In den Warenkorb';\r\n                addToCartModalButton.style.backgroundColor = '#333';\r\n            }\r\n        }\r\n    }\r\n\r\n    productDetailModal.classList.add('is-expanded');\r\n    document.body.style.overflow = 'hidden';\r\n}\r\n\r\nfunction closeProductModal(){\r\n    productDetailModal.classList.remove('is-expanded');\r\n    document.body.style.overflow = '';\r\n}\r\n\r\ncloseButton.addEventListener('click', closeProductModal);\r\n\r\nproductDetailModal.addEventListener('click', (event) =>{\r\n    if (event.target === productDetailModal){\r\n        closeProductModal();\r\n    }\r\n});\r\n\r\nif(addToCartModalButton){\r\n    addToCartModalButton.addEventListener(\"click\", async (event) =>{\r\n        event.stopPropagation();\r\n        if (currentProductInModal && currentProductInModal.menge > 0){\r\n            await addToCartAPI(currentProductInModal);\r\n            if (modalQuantity) {\r\n                modalQuantity.textContent = `Verfügbare Menge: ${currentProductInModal.menge}`;\r\n                if (currentProductInModal.menge <= 0) {\r\n                    addToCartModalButton.disabled = true;\r\n                    addToCartModalButton.textContent = 'Nicht vorrätig';\r\n                    addToCartModalButton.style.backgroundColor = '#ccc';\r\n                }\r\n            }\r\n        } else {\r\n            alert(\"Dieses Produkt ist leider nicht mehr vorrätig.\");\r\n        }\r\n    });\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", () =>{\r\n    fetchProducts({}, 'http://localhost:3000/api/inv/product/search/');\r\n});\r\n\r\nwindow.addEventListener('cartItemRemoved', async (event) => {\r\n    const { produktid, anzahl } = event.detail;\r\n\r\n    const updatedProductIndex = allProductsCache.findIndex(p => p.produktid === produktid);\r\n    if (updatedProductIndex !== -1) {\r\n        allProductsCache[updatedProductIndex].menge = Math.min(\r\n            allProductsCache[updatedProductIndex].originalMenge,\r\n            allProductsCache[updatedProductIndex].menge + anzahl\r\n        );\r\n        renderProducts(allProductsCache);\r\n    }\r\n    await loadAndSyncCart();\r\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/ProductPage/Product.js b/frontend/ProductPage/Product.js
--- a/frontend/ProductPage/Product.js	(revision d65d79c0762de289f9001f304fdf0e6ee8b7fb3f)
+++ b/frontend/ProductPage/Product.js	(date 1752223140129)
@@ -12,62 +12,6 @@
 let allProductsCache = [];
 let currentCart = [];
 
-function updateCartCount() {
-    const cart = JSON.parse(localStorage.getItem("cart")) || [];
-    const count = cart.reduce((sum, item) => sum + item.quantity, 0);
-    const cartCountElement = document.getElementById("cart-count");
-    if(cartCountElement) {
-        cartCountElement.textContent = count;
-    }
-}
-
-async function loadAndSyncCart() {
-    const userToken = localStorage.getItem('adminToken');
-    let tempProducts = [...allProductsCache];
-
-    if (userToken) {
-        try {
-            const response = await fetch('http://localhost:3000/api/inv/warenkorb/myproducts', {
-                method: 'GET',
-                headers: {
-                    'Content-Type': 'application/json',
-                    'Authorization': `Bearer ${userToken}`
-                }
-            });
-            if (response.ok) {
-                currentCart = await response.json();
-                tempProducts = tempProducts.map(product => {
-                    const cartItem = currentCart.find(item => item.produktid === product.produktid);
-                    if (cartItem) {
-                        return { ...product,
-                            menge: product.menge - cartItem.anzahl
-                        };
-                    }
-                    return product;
-                });
-            } else {
-                currentCart = [];
-            }
-        } catch (error) {
-            console.error("Fehler beim Abrufen des Warenkorbs für Synchronisation:", error);
-            currentCart = [];
-        }
-    } else {
-        currentCart = JSON.parse(localStorage.getItem("cart")) || [];
-        tempProducts = tempProducts.map(product => {
-            const cartItem = currentCart.find(item => item.produktid === product.produktid);
-            if (cartItem) {
-                return { ...product,
-                    menge: product.menge - cartItem.quantity
-                };
-            }
-            return product;
-        });
-    }
-    allProductsCache = tempProducts;
-    updateCartCount();
-}
-
 function renderProducts(productList) {
     const container = document.querySelector('.product-card');
     container.innerHTML = '';
@@ -250,6 +194,62 @@
     }
 }
 
+function updateCartCount() {
+    const cart = JSON.parse(localStorage.getItem("cart")) || [];
+    const count = cart.reduce((sum, item) => sum + item.quantity, 0);
+    const cartCountElement = document.getElementById("cart-count");
+    if(cartCountElement) {
+        cartCountElement.textContent = count;
+    }
+}
+
+async function loadAndSyncCart() {
+    const userToken = localStorage.getItem('adminToken');
+    let tempProducts = [...allProductsCache];
+
+    if (userToken) {
+        try {
+            const response = await fetch('http://localhost:3000/api/inv/warenkorb/myproducts', {
+                method: 'GET',
+                headers: {
+                    'Content-Type': 'application/json',
+                    'Authorization': `Bearer ${userToken}`
+                }
+            });
+            if (response.ok) {
+                currentCart = await response.json();
+                tempProducts = tempProducts.map(product => {
+                    const cartItem = currentCart.find(item => item.produktid === product.produktid);
+                    if (cartItem) {
+                        return { ...product,
+                            menge: product.menge - cartItem.anzahl
+                        };
+                    }
+                    return product;
+                });
+            } else {
+                currentCart = [];
+            }
+        } catch (error) {
+            console.error("Fehler beim Abrufen des Warenkorbs für Synchronisation:", error);
+            currentCart = [];
+        }
+    } else {
+        currentCart = JSON.parse(localStorage.getItem("cart")) || [];
+        tempProducts = tempProducts.map(product => {
+            const cartItem = currentCart.find(item => item.produktid === product.produktid);
+            if (cartItem) {
+                return { ...product,
+                    menge: product.menge - cartItem.quantity
+                };
+            }
+            return product;
+        });
+    }
+    allProductsCache = tempProducts;
+    updateCartCount();
+}
+
 function openProductModal(product){
     currentProductInModal = product;
     modalImage.src = product.bild || '';
Index: backend/serverBackend.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import express from \"express\";\r\nimport morgan from \"morgan\";\r\nimport {mountRoutes} from \"./routes/router.js\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport cors from \"cors\";\r\nimport {\r\n    createProductWarenkorbTable,\r\n    createProduktTable, createWarenkorbTable,\r\n    deleteProductTable,\r\n    deleteWarenkorbProduktTable,\r\n    deleteWarenkorbTable\r\n} from \"./datenbank/produkt_verwaltung/produktDDL.js\";\r\nimport {createBenutzerTable, deleteBenutzerTable} from \"./datenbank/user_verwaltung/userDDL.js\";\r\nimport {createEinkaufTables, deleteEinkaufTables} from \"./datenbank/einkauf_verwaltung/einkaufDDL.js\";\r\nimport {\r\n    createWunschlisteTables,\r\n    deleteWunschlisteTables\r\n} from \"./datenbank/wunschliste_verwaltung/wunschlisteDDL.js\";\r\nimport {createOneTimeLoginTable, dropOneTimeLoginTable} from \"./datenbank/auth/authAllMethods.js\";\r\nimport {createBenutzer, updateBenutzer} from \"./datenbank/user_verwaltung/userDML.js\";\r\nimport {getUserByUsername} from \"./datenbank/user_verwaltung/userDRL.js\";\r\nimport {createProdukt, createWarenkorb} from \"./datenbank/produkt_verwaltung/produktDML.js\";\r\n\r\nconst app = express()\r\nconst port = 3000\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(cookieParser());\r\n\r\napp.use(cors({\r\n    origin: \"http://localhost:5000\",\r\n    credentials: true\r\n}));\r\n\r\n// configure logging before each api call\r\nmorgan.token('source', function () {\r\n    return 'Morgan:';\r\n});\r\nconst pad = (n) => n.toString().padStart(2, '0');\r\nmorgan.token('timestamp', function () {\r\n    const now = new Date();\r\n    return `${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear()} ` +\r\n        `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(now.getSeconds())}`;\r\n});\r\nconst customFormat = ':source :method :url :status :res[content-length] - :response-time ms [:timestamp]';\r\napp.use(morgan(customFormat));\r\n\r\nmountRoutes(app);\r\n\r\n// Globales abfangen unbehandelter Fehler\r\napp.use((err, req, res, next) => {\r\n    console.error(\"Server: Es ist ein unbehandelter Fehler aufgetreten:\\n \" + err.stack);\r\n    return res.status(500).json({\r\n        error: 'Ein Fehler ist aufgetreten!'\r\n    });\r\n});\r\n\r\n// Docker 1. mal starten: docker compose build --no-cache\r\n// Docker wieder löschen: docker compose down -v\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.redirect(`http://localhost:5000/`);\r\n})\r\n\r\napp.listen(port, () => {\r\n    init()\r\n    console.log(`Backend server läuft auf http://localhost:${port}`)\r\n})\r\n\r\nasync function init() {\r\n    await deleteWarenkorbProduktTable();\r\n    await deleteWarenkorbTable();\r\n    await deleteProductTable();\r\n    await deleteBenutzerTable()\r\n    await deleteEinkaufTables();\r\n    await deleteWunschlisteTables();\r\n    await dropOneTimeLoginTable();\r\n\r\n    await createBenutzerTable();\r\n    await createProduktTable();\r\n    await createWarenkorbTable();\r\n    await createProductWarenkorbTable();\r\n    await createEinkaufTables();\r\n    await createWunschlisteTables();\r\n    await createOneTimeLoginTable();\r\n\r\n    // create admin account\r\n    await createAdminAccount()\r\n    //await createSeedData()\r\n    console.log(\"Innit db successfully!\");\r\n}\r\n\r\nasync function createSeedData() {\r\n    await createProdukt(\r\n        \"Nike Indy Dri-fit Cross-Back Compression\",\r\n        37.95,\r\n        100,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Nike. Material: 72 % Polyester / 28 % Spandex. Leichter Sport-BH mit mittlerem Halt und atmungsaktivem Dri-FIT-Material – stylischer Rückenträger.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"DECALVIBES Longline Sports Bra Sport BH Ultimate\",\r\n        47.90,\r\n        80,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: DECALVIBES. Material: 78 % Polyester / 22 % Elastan. Lang geschnittener Sport-BH mit starkem Halt – ideal für High-Impact-Workouts.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"DECALVIBES Longline Sports Bra Sport BH Pro\",\r\n        46.50,\r\n        85,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: DECALVIBES. Material: 78 % Polyester / 22 % Elastan. Sportlicher BH mit Kompression und atmungsaktivem Stoff – eng anliegend und bequem.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"FALKE Damen Versatility Melange Maximum Support\",\r\n        30.99,\r\n        60,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: FALKE. Material: ca. 85 % Polyester / 15 % Elastan (geschätzt). High-Support-Sport-BH für intensive Belastung – hochwertig verarbeitet mit funktionalem Material.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Assoluta UNO Damen Sport Oberteil\",\r\n        26.90,\r\n        120,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Assoluta. Material: ca. 90 % Polyester / 10 % Elastan (geschätzt). Schlichtes, funktionales Sportoberteil für Damen – schnelltrocknend und atmungsaktiv.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Nike Training – Swoosh Dri-FIT – Sport-BH\",\r\n        43.95,\r\n        90,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Nike. Material: 80 % Polyester / 20 % Spandex (Dri-FIT). Bequemer Sport-BH mit Dri-FIT-Technologie – mittlerer Halt für alle Sportarten.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"ASRV Training Apparel\",\r\n        35.99,\r\n        50,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: ASRV. Material: AeroSilver® (antibakterielles Polyester), Creora® Tech-Rib (elastischer Spandex), Tech Essential™ (Baumwolle mit SilverPlus®). Premium-Trainingskleidung mit technischem Material – stylisch, funktionell und innovativ.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"BlenderBottle Shaker Bottle Pro\",\r\n        22.90,\r\n        200,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: BlenderBottle. Material: Tritan® Kunststoff (BPA-frei, bruchsicher), BlenderBall® Edelstahl 316. Shaker mit BlenderBall für perfekte Mix-Ergebnisse – BPA-frei, auslaufsicher, spülmaschinenfest.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"BlenderBottle Strada Shaker\",\r\n        34.95,\r\n        150,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: BlenderBottle. Material: Tritan® Kunststoff (BPA-frei, stoßfest), BlenderBall® Edelstahl 316. Shaker mit Druckverschluss und Edelstahl-Design – ideal für Proteinshakes unterwegs.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"VECH Protein-Shaker-Flasche\",\r\n        28.99,\r\n        180,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: VECH. Material: Tritan® oder PP-Kunststoff (BPA-frei), Mixkugel (Metall oder Kunststoff). Günstiger Protein-Shaker mit Mixkugel – geeignet für Fitnessstudio und Sport.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Voltrix Electric Protein Shaker Bottle\",\r\n        19.45,\r\n        100,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Voltrix. Material: Tritan® + PP-Kunststoff, Edelstahl-Mixer, Silikondichtungen. Elektrisch betriebener Protein-Shaker – kabellos wiederaufladbar, automatisches Mixen.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"ATX® - Power Band\",\r\n        24.90,\r\n        150,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: ATX. Material: Latexfreier Naturkautschuk (gummi), BPA‑& phthalatfre. Extrem robuste Widerstandsbänder aus Gummi – ideal für Krafttraining, Dehnung und Reha.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"ZenOne Sports ZenLoops Fabric Fitnessbänder\",\r\n        42.90,\r\n        80,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: ZenOne Sports. Material: Polyester-Stoff + natürlicher Latex, extra breit & rutschfest. Stoff-Widerstandsbänder in 3 Stärken – für Po-, Bein- und Ganzkörpertraining.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Tikaton Stretch-Widerstandsband\",\r\n        26.90,\r\n        120,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Tikaton. Material: Naturkautschuk (Gummi). Elastisches Fitnessband zur Verbesserung von Flexibilität, Stabilität und Muskelkraft.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Rogue Fitness - Widerstandbänder\",\r\n        27.50,\r\n        100,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Rogue Fitness. Material: Natural Latex Rubber (Loop-Bands, z. B. Monster/Shorty). Verschiedene Fitnessgeräte für Zuhause – kompakt und vielseitig einsetzbar.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Fringe Sport Fitnessbänder (Set für Yoga, Pilates)\",\r\n        39.99,\r\n        70,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Fringe Sport. Material: Natural Rubber / Synthetic Rubber, teils latexfrei. Set aus Widerstandsbändern für Yoga, Pilates und Krafttraining.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Serious Steel Klimmzug- & Stretchbänder\",\r\n        38.75,\r\n        90,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Serious Steel. Material: latexfreier Synthetic Rubber. Stark belastbare Bänder zur Unterstützung beim Klimmzugtraining und Bodyweight-Übungen.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Fit Simplify long bands\",\r\n        33.40,\r\n        110,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Fit Simplify. Material: Natural Latex Rubber (Loop-Bands). Extra lange Bänder für Dehnübungen, Reha und funktionelles Training.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Persit Ombre Yoga Leggings\",\r\n        31.90,\r\n        100,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Persit. Material: 65 % Nylon / 25 % Polyester / 10 % Spandex. Nahtlose Leggings mit Ombre-Farbverlauf – elastisch, blickdicht und perfekt für Yoga oder Fitness.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Lululemon Damen Mesh Leggings Yoga Leggings\",\r\n        45.50,\r\n        75,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Lululemon. Material: 77 % Nylon / 23 % Lycra®. Leggings mit atmungsaktiven Mesh-Einsätzen – figurbetont und bequem.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Oasis Pure Luxe Leggings mit hoher Taille\",\r\n        37.00,\r\n        90,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Oasis. Material: 82 % Polyester / 18 % Elastan. Weiche Leggings mit hoher Taille für Komfort und Stil beim Yoga oder Alltagstragen.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Nike Universe Medium Support High Waist Leggings\",\r\n        40.95,\r\n        85,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Nike. Material: 80 % Polyester / 20 % Spandex (Dri-FIT). Leggings mit mittlerem Halt, hoher Taille und Dri-FIT-Technologie für intensives Training.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Zella Studio Luxe Pocket Bike Shorts\",\r\n        44.95,\r\n        70,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Zella. Material: 85 % Nylon / 15 % Spandex. Weiche Biker-Shorts mit praktischen Taschen – ideal für Studio-Workouts.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Rogue Halbfinger Handschuhe\",\r\n        34.90,\r\n        60,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Rogue. Material Oberhand: ca. 90 % Polyester / 10 % Spandex. Material Handfläche: 100 % Polyurethan (synthetisches Leder). Atmungsaktive Trainingshandschuhe mit offener Fingerpartie – für sicheren Griff beim Krafttraining.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Under Armour Weightlifting Gloves\",\r\n        41.99,\r\n        50,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Under Armour. Material Oberhand: ca. 82 % Polyester / 18 % Spandex (Iso-Chill). Material Handfläche: 100 % Echtleder. Polsterung an den Handflächen – Schutz vor Blasen und fester Halt bei Hantelübungen.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"REXCHI Halbfinger-Sport-Trainingshandschuhe\",\r\n        13.95,\r\n        120,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: REXCHI. Material Oberhand: ca. 100 % Polyester-Mikrofaser. Material Handfläche: ca. 70 % Neopren / 30 % Silikon (Print). Belüftete Handschuhe mit Handgelenkstütze – speziell für Kraftsport und Bodybuilding.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Nike Damen Fitness Atmungsaktiv\",\r\n        39.99,\r\n        100,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Nike. Material: 72% Polyester / 28% Spandex. Atmungsaktives Damen-Fitnessshirt aus Funktionsmaterial – schnelltrocknend und elastisch.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Reebok Damen-Kompressionsshirt, kurzärmelig, athletisches\",\r\n        19.95,\r\n        80,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Reebok. Material: 80% Nylon / 20% Elastan. Kurzärmeliges Kompressionsshirt für Damen – unterstützt die Muskulatur und reduziert Muskelvibrationen.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Under Armor Spider Print Herren Sport T-Shirts Fitness Gym\",\r\n        49.40,\r\n        70,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Under Armour. Material: 90% Polyester / 10% Elastan. Sportshirt mit Spider-Print – atmungsaktiv und ideal für Fitness, Laufen oder Kraftsport.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"2XU Sport Tank Top\",\r\n        22.35,\r\n        90,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: 2XU. Material: 82% Nylon / 18% Elastan. Ärmelloses Sportshirt für Herren – ideal für Sommer-Workouts und Studioeinsätze.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"RDX Langarm-Fitness-Kleidung, Kompressionsshirt\",\r\n        47.75,\r\n        60,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: RDX Sports. Material: 75% Polyester / 25% Elastan. Langärmliges Kompressionsshirt – optimal für intensives Training, schnelltrocknend und eng anliegend.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Domyos Lauf-T-Shirt für Herren\",\r\n        28.75,\r\n        85,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Domyos. Material: 88% Polyester / 12% Elasthan. Funktionslaufshirt mit langen Ärmeln – leicht, atmungsaktiv und komfortabel bei kühlerem Wetter.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Puma Damen Sommer Sport Laufshorts\",\r\n        49.40,\r\n        75,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Puma. Material: 85% Polyester / 15% Elasthan. Leichte und atmungsaktive Sportshorts für Damen – mit elastischem Bund und Innenslip.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"KOMBAT 2-lagige Laufshorts\",\r\n        29.55,\r\n        100,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: KOMBAT. Material: 90% Polyester / 10% Elasthan. 2-in-1 Laufshorts mit Innenkompression und Außenstoff – für zusätzlichen Halt und Flexibilität.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"ASHION Herren Laufhose Sommer Sport\",\r\n        23.89,\r\n        95,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: ASHION. Material: 88% Polyester / 12% Elasthan. Leichte Herren-Laufshorts mit atmungsaktivem Gewebe – ideal für Sommertraining im Freien, mit Reißverschlusstaschen für praktische Aufbewahrung.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Nike Herren Shorts\",\r\n        24.77,\r\n        110,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: Nike. Material: 80% Polyester / 20% Elasthan. Elastische Herren-Trainingsshorts mit schnelltrocknender Dri-FIT-Technologie – perfekter Sitz beim Fitness- oder Ausdauertraining.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"X-bionic Twyce Damenshorts\",\r\n        45.35,\r\n        50,\r\n        \"Sportbekleidung\",\r\n        \"Hersteller: X-Bionic. Material: 75% Polyamid / 25% El Material: 75% Polyamid / 25% Elastan.    Hochwertige Technologie-Laufshorts für Damen – mit Belüftungssystem und kompressivem Halt.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"PROIRON Weighted Adjustable Skipping Rope\",\r\n        35.89,\r\n        80,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Proirion. Material: Griffe: 70% ABS-Kunststoff, 30% Metall; Seil: PVC-ummantelter Stahl. Verstellbares Springseil mit Gewichten in den Griffen, ideal für Cardio- und HIIT-Training.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Velites Workout Springseil\",\r\n        24.25,\r\n        120,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Velites. Material: Griffe: 85% Kunststoff, 15% Gummi; Seil: Stahlkabel mit PVC-Ummantelung. Klassisches Springseil mit rutschfesten Griffen – geeignet für Fitness- und Ausdauertraining.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"RENPHO Elektronisches Zähl-Springseil\",\r\n        30.35,\r\n        60,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: RENPHO. Material: Griffe: ABS-Kunststoff mit Elektronik; Seil: Stahl mit Kunststoffummantelung. Springseil mit digitalem Zähler zur Erfassung von Sprüngen, Kalorien und Trainingszeit.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Beast Gear Jump Seil Ultra-speed Skipping Seil Stahldraht\",\r\n        31.35,\r\n        70,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Beast Gear. Material: Seil: 100% Stahlkabel; Griffe: Aluminium mit Kunststoffüberzug. Speed Rope mit Stahldrahtkern – ideal für CrossFit, Boxen und schnelles Intervalltraining.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Domyos Springseil Basic • Slim Grip\",\r\n        11.89,\r\n        150,\r\n        \"Fitnesszubehör\",\r\n        \"Hersteller: Domyos. Material: Griffe: 90% Kunststoff, 10% Gummi; Seil: PVC-beschichtetes Stahlseil. Einfaches, leichtes Springseil mit ergonomischen Slim-Griffen – perfekt für Einsteiger.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"BARWING 90° Adjustable Weight Bench\",\r\n        264.35,\r\n        20,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: BARWING. Verstellbare Hantelbank mit 7 Rückenlehnen- und 4 Sitzpositionen. Hohe Belastbarkeit bis 800 lb, ideal für Krafttraining zu Hause.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"ArtSport Multifunktion Hantelbank Set\",\r\n        142.99,\r\n        30,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: ArtSport. Multifunktionale Hantelbank mit Curlpult, Beincurler und Langhantelablage – besonders für Einsteiger geeignet.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"AtlasStrength Fitness Halterbank\",\r\n        292.75,\r\n        15,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: AtlasStrength. Robuste Flachbank für Heimfitness – stabile Stahlkonstruktion, rutschfeste Standfüße, geeignet für vielfältige Übungen.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"Bluefin Fitness Weight Hantelbank\",\r\n        356.15,\r\n        10,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: Bluefin Fitness. Faltbare und ergonomische Trainingsbank mit mehreren Positionen – platzsparend und ideal für den Heimgebrauch.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"GAT SLIM Hantelbank\",\r\n        99.95,\r\n        40,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: GAT. Kompakte Hantelbank mit verstellbarer Rückenlehne – ideal für kleinere Trainingsräume und gezielte Workouts.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"GORILLA SPORTS® Hantel-Set\",\r\n        358.99,\r\n        25,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: Gorilla Sports. Klassisches Hantelset mit Gewichten – ideal für Krafttraining zuhause. Inkl. Kurzhanteln und Scheiben.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"GORILLA SPORTS® Hantelbank mit Gewichten\",\r\n        332.05,\r\n        20,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: Gorilla Sports. Hantelbank mit Langhantelablage und Gewichten – geeignet für Bankdrücken, Beincurls und mehr.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"HOMCOM Adjustable Weight Bench\",\r\n        289.75,\r\n        18,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: HOMCOM. Vielseitige Hantelbank mit einstellbarer Neigung – kombiniert Komfort mit Funktion für effektive Home Workouts.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"KLARFIT Kraftstation Workout Hero 3000\",\r\n        210.25,\r\n        12,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: Klarfit. Kraftstation mit Zugseilen, Bankdrücken und Curlpult – All-in-One Lösung für Heimtraining.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"MAXXUS Schrägbank\",\r\n        378.99,\r\n        8,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: MAXXUS. Professionelle Schrägbank mit mehrfach verstellbarer Rückenlehne – für intensives Muskeltraining.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"XDDIAS Hantelbank\",\r\n        205.35,\r\n        22,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: XDDIAS. Klappbare Hantelbank mit verstellbarer Neigung – platzsparend und schnell einsatzbereit.\"\r\n    );\r\n\r\n    await createProdukt(\r\n        \"YOLEO Klappbare Hantelbank Multifunktion\",\r\n        314.99,\r\n        14,\r\n        \"Trainingsgerät\",\r\n        \"Hersteller: YOLEO. Multifunktionale Bank mit Neigungsoptionen für Oberkörper-Workouts. Ideal für kleine Trainingsbereiche.\"\r\n    );\r\n}\r\n\r\nasync function createAdminAccount() {\r\n    await createBenutzer(\"admin\", \"admin\", \"amdin\", \"admin\", \"$2b$12$i2V4lHexLcYzjcUXo30ywuFyRlznGMFNr96T0XqHqgPsF1tJjXl3y\", \"12345\", \"admin\", \"admin\", \"admin\", \"admin\", 'admin');\r\n    const user = await getUserByUsername(\"admin\");\r\n    user[0].authentifizierung = true\r\n    await updateBenutzer(\r\n        user[0].benutzerid,\r\n        user[0].benutzername,\r\n        user[0].nachname,\r\n        user[0].vorname,\r\n        user[0].email,\r\n        user[0].rolle,\r\n        user[0].kontostatus,\r\n        user[0].plz,\r\n        user[0].ort,\r\n        user[0].strasse,\r\n        user[0].hausnummer,\r\n        user[0].telefonnr,\r\n        user[0].authentifizierung\r\n    );\r\n    await createWarenkorb(user[0].benutzerid);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/serverBackend.js b/backend/serverBackend.js
--- a/backend/serverBackend.js	(revision d65d79c0762de289f9001f304fdf0e6ee8b7fb3f)
+++ b/backend/serverBackend.js	(date 1752223140129)
@@ -87,7 +87,7 @@
 
     // create admin account
     await createAdminAccount()
-    //await createSeedData()
+    await createSeedData()
     console.log("Innit db successfully!");
 }
 
Index: frontend/Warenkorb/Warenkorb.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!Doctype html>\r\n<html lang=\"de\">\r\n<head>\r\n    <meta charset=\"UTF-8\"/>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n    <link rel=\"stylesheet\" href=\"../public/navbar.css\">\r\n    <link rel=\"stylesheet\" href=\"../public/page_layout.css\">\r\n    <link rel=\"stylesheet\" href=\"../public/footer.css\">\r\n    <title>Warenkorb</title>\r\n    <link rel=\"stylesheet\" href=\"Warenkorb.css\">\r\n</head>\r\n\r\n<body>\r\n<!--Navbar noch hinzufügen-->\r\n    <main>\r\n        <h1>Warenkorb</h1>\r\n        <div class=\"cart-items\"></div>\r\n        <div class=\"cart-summary\">\r\n            <p>Gesamtsumme: <span id=\"total-price\">€0.00</span></p>\r\n            <a href=\"../Checkout/Checkout.html\">\r\n                <button id=\"checkout-button\">Zur Kasse</button>\r\n            </a>\r\n        </div>\r\n    </main>\r\n    <script src=\"Warenkorb.js\"></script>\r\n</body>\r\n\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/Warenkorb/Warenkorb.html b/frontend/Warenkorb/Warenkorb.html
--- a/frontend/Warenkorb/Warenkorb.html	(revision d65d79c0762de289f9001f304fdf0e6ee8b7fb3f)
+++ b/frontend/Warenkorb/Warenkorb.html	(date 1752223140130)
@@ -11,18 +11,16 @@
 </head>
 
 <body>
-<!--Navbar noch hinzufügen-->
-    <main>
-        <h1>Warenkorb</h1>
-        <div class="cart-items"></div>
-        <div class="cart-summary">
-            <p>Gesamtsumme: <span id="total-price">€0.00</span></p>
-            <a href="../Checkout/Checkout.html">
-                <button id="checkout-button">Zur Kasse</button>
-            </a>
-        </div>
-    </main>
-    <script src="Warenkorb.js"></script>
+<main>
+    <h1>Warenkorb</h1>
+    <div class="cart-items"></div>
+    <div class="cart-summary">
+        <p>Gesamtsumme: <span id="total-price">€0.00</span></p>
+        <a href="../Checkout/Checkout.html"> <button id="checkout-button">Zur Kasse</button>
+        </a>
+    </div>
+</main>
+<script src="../ProductPage/products.js"></script> <script src="Warenkorb.js"></script>
 </body>
 
 </html>
\ No newline at end of file
